import { z } from "zod";
import { createTRPCRouter, publicProcedure } from "~/server/api/trpc";

export const {{name}}Router = createTRPCRouter({
  // Get all {{name}}s
  getAll: publicProcedure.query(async ({ ctx }) => {
    return await ctx.db.{{name}}.findMany({
      orderBy: { createdAt: "desc" },
    });
  }),

  // Get {{name}} by ID
  getById: publicProcedure
    .input(z.object({ id: z.string() }))
    .query(async ({ ctx, input }) => {
      return await ctx.db.{{name}}.findUnique({
        where: { id: input.id },
      });
    }),

  // Create new {{name}}
  create: publicProcedure
    .input(z.object({
      // Add your input schema here
      name: z.string().min(1),
    }))
    .mutation(async ({ ctx, input }) => {
      return await ctx.db.{{name}}.create({
        data: {
          // Add your data mapping here
          name: input.name,
        },
      });
    }),

  // Update {{name}}
  update: publicProcedure
    .input(z.object({
      id: z.string(),
      // Add your input schema here
      name: z.string().min(1).optional(),
    }))
    .mutation(async ({ ctx, input }) => {
      const { id, ...data } = input;
      return await ctx.db.{{name}}.update({
        where: { id },
        data,
      });
    }),

  // Delete {{name}}
  delete: publicProcedure
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      return await ctx.db.{{name}}.delete({
        where: { id: input.id },
      });
    }),
}); 